# Try switching to control-a for the 'master' session (using control-b for the
# inner ones) so that I can use control-space inside neovim
set -g prefix C-a
bind C-a send-prefix
bind C-a last-window

# Change horizontal/vertical splits to something a bit more memorable
bind - split-window -v -c "#{pane_current_path}"
# (backslash key has '|' on it - don't want to be hitting shift too
bind \\ split-window -h -c "#{pane_current_path}"

# Select panes using Vim-style control keys
bind h select-pane -L
bind l select-pane -R
bind j select-pane -D
bind k select-pane -U

# Resize using Vim-style control keys
bind-key -r -T prefix Down resize-pane -D 5
bind-key -r -T prefix Up resize-pane -U 5
bind-key -r -T prefix Left resize-pane -L 5
bind-key -r -T prefix Right resize-pane -R 5


# Highlight the active pane
set -g pane-border-style fg=green,bg=black
set -g pane-active-border-style fg=white,bg=yellow

# Prevent delays in switching mode in Vim
set -sg escape-time 0
set -sg repeat-time 600

# Reload the config.
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

set-window-option -g automatic-rename on

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
set-window-option -g aggressive-resize on

set-option -g set-titles on

# Auto-renumber windows so we don't have gaps
set-option -g renumber-windows on

set -g default-terminal tmux-256color
set -ga terminal-overrides ",*256col*:Tc"

# Custom status bar
set -g status-left-length 32
set -g status-right-length 150
set -g status-interval 5

#color15=??
#color16=black
#color39=cyan
#color234=dark grey/black
#color238=grey
#color254=white
set -g status-bg "#337777"
set -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour238,bg=#a8a8a8,nobold]'
set -g status-right '#{battery_status_bg} #{battery_icon} #{battery_percentage} #{battery_remain} #[fg=colour16,bg=#888888] %R %d %b #[fg=colour254,bg=#a8a8a8,nobold]#[fg=colour16,bg=colour254,bold] #h '

set -g window-status-format "#[fg=white,bg=colour234] #I #W "
set -g window-status-current-format "#[fg=#a8a8a8,bg=#891515]#[fg=colour254,bg=#891515,noreverse,bold] #I #W #[fg=#891515,bg=#a8a8a8,nobold]"

# Activity
setw -g monitor-activity on
set -g visual-activity off

setw -g window-status-activity-style bg=red

# Better name management
bind c new-window \; command-prompt "rename-window '%%'"
bind C new-window
bind , command-prompt "rename-window '%%'"

# Copy mode
setw -g mode-keys vi
bind ` copy-mode
unbind [
unbind P
bind P paste-buffer
bind -Tcopy-mode-vi 'v' send -X begin-selection
bind -Tcopy-mode-vi 'V' send -X select-line
bind -Tcopy-mode-vi 'C-v' send -X rectangle-toggle
bind -Tcopy-mode-vi Escape send -X clear-selection
bind -Tcopy-mode-vi 'q' send -X cancel

# Set focus-events so that Vim can make use of them
set -g focus-events on

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

set -g history-limit 100000

# Turn Tmux 2.1 mouse support on
set-option -g -q mouse on

# This allows you to press page up in normal mode and have it scroll back into
# the history. If you page down back to the bottom of the history, it
# automatically exits copy mode. If there is an alternate screen (i.e. a full
# screen app like vim, less, mutt, etc) then it does not enter copy mode, but
# passes through the key press. This is because alternate screen apps usually
# handle page up/down itself and also will have no scroll back.
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
bind -Tcopy-mode-vi PPage send -X page-up
bind -Tcopy-mode-vi NPage send -X page-down

# Very similar to page up, except for the mouse wheel. i.e. I just scroll back
# and forward and if I scroll to the end of the history, copy mode
# automatically exits. Again, just pass through the click for alternate screens
# - they often handle the mouse themselves
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
bind -Tcopy-mode-vi WheelUpPane send -X halfpage-up
bind -Tcopy-mode-vi WheelDownPane send -X halfpage-down

# These options allow you do have different styles for active and non-active
# panes. I usually have a black background, so now I set the non-active panes
# to slightly grey so it is easy to pick the active pane at a glance
set-window-option -g window-style 'bg=#181818'
set-window-option -g window-active-style 'bg=black'
set-window-option -g pane-active-border-style ''

# tmux plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'schasse/tmux-jump'
set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TMUX plugin manager (keep this line at the bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
