set -g prefix C-a                           # Use control-a for the 'master' session (using
                                            # control-b for the inner ones) so that I can use
                                            # control-space inside neovim

set -gs escape-time 0                       # Prevent delays in switching mode in Vim
set -gs repeat-time 600
set -g display-time 4000                    # Change tmux messages display time from 750ms to 4s
set -g status-position top                  # Put tmux bar at the top of the screen
set -g set-titles on                        # Automatically set window title
set -g renumber-windows on                  # Auto-renumber windows so we don't have gaps
set -g default-terminal tmux-256color
set -gas terminal-overrides "*:Tc"          # true color support
set -gas terminal-overrides "*:RGB"         # true color support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
set -g status-interval 5                    # Refresh 'status-left' and 'status-right' more often, from every 15s to 5s
set -g set-clipboard on                     # use system clipboard
set -g visual-activity off
set -g focus-events on                      # Set focus-events so that Vim can make use of them
set -g history-limit 100000
set -g -q mouse on                          # Turn Tmux 2.1 mouse support on
setw -g mode-keys vi
setw -g monitor-activity on                 # Activity
setw -g window-style 'bg=#282828'           # These options allow for different styles for active and non-active
                                            # panes. I usually have a black background, so now I set the non-active panes
                                            # to slightly grey so it is easy to pick the active pane at a glance
setw -g window-active-style 'bg=black'
setw -g automatic-rename on                 # Automatically rename window to current process
setw -g aggressive-resize on                # Rather than constraining window size to the maximum size of any client
                                            # connected to the *session*, constrain window size to the maximum size of any
                                            # client connected to *that window*. Much more reasonable.


# Keybindings -----------------------------------------------------------------

# Use C-a v to send the prefix
bind v send-prefix

# Double-press C-a to switch to the last session
bind C-a last-window

# Change horizontal/vertical splits to something a bit more memorable
bind - split-window -v -c "#{pane_current_path}"
# = is next to - on my keyboard
bind = split-window -h -c "#{pane_current_path}"

# Select panes using Vim-style control keys
bind h select-pane -L
bind l select-pane -R
bind j select-pane -D
bind k select-pane -U

# Resize using Vim-style control keys
bind -r -T prefix Down resize-pane -D 5
bind -r -T prefix Up resize-pane -U 5
bind -r -T prefix Left resize-pane -L 5
bind -r -T prefix Right resize-pane -R 5

# Close all other panes
bind o kill-pane -a

# Reload the config.
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# Better name management
bind c new-window \; command-prompt "rename-window '%%'"
bind C new-window
bind , command-prompt "rename-window '%%'"

# Copy mode
bind ` copy-mode
unbind [
unbind P
bind P paste-buffer
bind -T copy-mode-vi 'v' send-keys -X begin-selection
bind -T copy-mode-vi 'V' send-keys -X select-line
bind -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle  # use <space> to start selection
bind -T copy-mode-vi 'y' send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi Escape send-keys -X clear-selection
bind -T copy-mode-vi 'q' send-keys -X cancel

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# This allows the ability to use the mouse wheel in normal mode and have it
# scroll back into the history. Scrolling back down to the bottom of the
# history, automatically exits copy mode. If there is an alternate screen (i.e.
# a full screen app like vim, less, mutt, etc) then it does not enter copy
# mode, but passes through the key press. This is because alternate screen apps
# usually handle page up/down itself and also will have no scroll back.
bind -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
bind -Tcopy-mode-vi WheelUpPane send -X halfpage-up
bind -Tcopy-mode-vi WheelDownPane send -X halfpage-down


# tmux plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'

# Use prefix + j to jump to a labelled position
set -g @plugin 'schasse/tmux-jump'

# Type `o` to open the selected text in the default program
# Press <ctrl-o> to open the selected text in $EDITOR
set -g @plugin 'tmux-plugins/tmux-open'

# Use Kagi for tmux-open searches:
#   - select text
#   - press shift-S
set -g @open-S 'https://kagi.com/search?q='

# Use 1Password, via the cli
set -g @plugin 'yardnsm/tmux-1password'
set -g @1password-account 'wordbank'

set -g @plugin 'https://gitlab.com/eliobtl1/kanagawa-tmux'


# Initialize TMUX plugin manager (keep this line at the bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
