#!/bin/sh
# Switch back to system Ruby/Python before updating
. /usr/local/opt/nvm/nvm.sh
UPDATE_SW_DIR="$HOME"
CURRENT_DIR=$(pwd)
CURRENT_PYTHON=$(pyenv version | head -n1 | cut -f1 -d' ')
CURRENT_RUBY=$(rbenv version | head -n1 | cut -f1 -d' ')
CURRENT_NODE=$(nvm current)
CURRENT_GO=$(goenv version | head -n1 | cut -f1 -d' ')
INSTALLED_CONFIG=${HOME}/.local/personal_config
mkdir -p ${INSTALLED_CONFIG}
echo "*** Active versions [Python: ${CURRENT_PYTHON} / Ruby: ${CURRENT_RUBY} / Node: ${CURRENT_NODE} / Go: ${CURRENT_GO}] ***"
cd "$UPDATE_SW_DIR" || exit
pyenv local "$(cat ~/.python-version)"
rbenv local "$(cat ~/.rbenv/version)"
nvm use 16.13.2
goenv local "$(cat ~/.goenv/version)"
# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
echo "*** System software"
echo
# sudo softwareupdate --all --install
echo "*** App Store programs"
echo
sudo mas outdated
sudo mas upgrade
echo "*** Ruby gems"
echo
rbenv rehash
gem list --local > "${INSTALLED_CONFIG}/ruby_gems"
sudo gem update --system
for outdated_gem in $(gem outdated | cut -f1 -d' ' | grep -v 'rdoc'); do
    sudo gem update "${outdated_gem}"
done
echo "*** Homebrew"
echo
brew list --versions > ${INSTALLED_CONFIG}/homebrew_packages
brew doctor
brew update
brew upgrade
brew upgrade --cask
# don't prompt about running Chromium every time it's upgraded
echo "*** Chromium permissions"
[ -f /Applications/Chromium.app ] && xattr -d com.apple.quarantine /Applications/Chromium.app
echo "*** neovim"
brew uninstall neovim && brew uninstall luajit && brew install --HEAD luajit && brew install --HEAD neovim
brew cleanup
echo "*** Pyenv"
echo
pyenv versions > ${INSTALLED_CONFIG}/pyenv_versions
pyenv rehash
echo "*** Goenv"
echo
goenv versions > ${INSTALLED_CONFIG}/goenv_versions
goenv rehash
echo "*** terraform"
echo
tfenv list > ${INSTALLED_CONFIG}/tfenv_versions
tfenv install "$(tfenv list-remote | egrep -v '(alpha|beta|\-rc)' | head -n1)"
echo "*** pipx"
echo
python3 -m pip install --upgrade pip setuptools
python3 -m pip install -U pipx
pipx list > ${INSTALLED_CONFIG}/pipx_packages
pipx upgrade-all
echo "*** poetry"
echo
poetry self update
echo "*** node"
echo
nvm ls --no-colors --no-alias > ${INSTALLED_CONFIG}/nvm_versions
npm list > ${INSTALLED_CONFIG}/npm_packages
npm set progress=false
npm install -g npm@latest
for package in $(npm -g outdated --parseable --depth=0 | cut -d: -f2)
do
    npm -g install "$package"
done
echo "*** Cargo"
echo
cargo install-update -a
echo "*** Neovim bundles"
echo
TERM=xterm-256color nvim +PlugUpdate! +qa
echo "*** zprezto submodules"
echo
cd ~/src/prezto || exit
git submodule update --recursive --remote
echo
echo "Restoring previous Python/Ruby/Node/Go versions"
cd "${CURRENT_DIR}" || exit
pyenv local "${CURRENT_PYTHON}"
rbenv local "${CURRENT_RUBY}"
nvm use "${CURRENT_NODE}"
goenv local "${CURRENT_GO}"
